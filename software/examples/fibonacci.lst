F00:0001       # Fibonacci calculator rfPhoenix asm
F00:0002       # r1 in the end will hold the Nth fibonacci number
F00:0003       
F00:0004       	.bss
F00:0005       _bss_a:
F00:0006       	.space	10
F00:0007       
F00:0008       	.data
F00:0009       _data_a:
F00:0010       	.space	10
F00:0011       
F00:0012       #	.org	0xFFFFFFFFFFFD0000
F00:0013       	.text
F00:0014       	.align	1
F00:0015       start:
F00:0016       	CSRRD	r2,r0,0x3001	# get the thread number
               S03:00000000:  87 00 10 00 03 01
F00:0017       	AND		r2,r2,15				# 0 to 3
               S03:00000006:  88 40 F0 00 00 01
F00:0018       	BNE		r2,r0,stall			# Allow only thread 0 to work
               S03:0000000C:  9C 00 00 27 00 E1
F00:0019       
F00:0020       	LDI		r2,0xFD
               S03:00000012:  89 00 D0 0F 00 01
F00:0021       	LDI		r2,0x01		# x = 1
               S03:00000018:  89 00 10 00 00 01
F00:0022       	STORE	r2,0xFFFC0000
               S03:0000001E:  A8 00 00 00 40 01 D7 FF 00 00 00 00
F00:0023       
F00:0024       	LDI		r3,0x10		# calculates 16th fibonacci number (13 = D in hex) (CHANGE HERE IF YOU WANT TO CALCULATE ANOTHER NUMBER)
               S03:0000002A:  C9 00 00 01 00 01
F00:0025       	OR		r1,r3,r0	# transfer y register to accumulator
               S03:00000030:  42 60 00 40 02 01
F00:0026       	ADD		r3,r3,-3	# handles the algorithm iteration counting
               S03:00000036:  C4 60 D0 FF 7F 01
F00:0027       
F00:0028       	LDI		r1,2		# a = 2
               S03:0000003C:  49 00 20 00 00 01
F00:0029       	STORE	r1,0xFFFC0004		# stores a
               S03:00000042:  68 00 40 00 40 01 D7 FF 00 00 00 00
F00:0030       
F00:0031       floop: 
F00:0032       	LOAD	r2,0xFFFC0004		# x = a
               S03:0000004E:  B4 00 40 00 40 01 D7 FF 00 00 00 00
F00:0033       	ADD		r1,r1,r2				# a += x
               S03:0000005A:  42 20 20 00 01 01
F00:0034       	STORE	r1,0xFFFC0004		# stores a
               S03:00000060:  68 00 40 00 40 01 D7 FF 00 00 00 00
F00:0035       	STORE	r2,0xFFFC0000		# stores x
               S03:0000006C:  A8 00 00 00 40 01 D7 FF 00 00 00 00
F00:0036       	ADD		r3,r3,-1				# y -= 1
               S03:00000078:  C4 60 F0 FF 7F 01
F00:0037         BNE 	r3,r0,floop	# jumps back to loop if Z bit != 0 (y's decremention isn't zero yet)
               S03:0000007E:  DC 00 00 F4 7F E1
F00:0038         NOP
               S03:00000084:  0B 00 00 00 00 01
F00:0039         NOP
               S03:0000008A:  0B 00 00 00 00 01
F00:0040         NOP
               S03:00000090:  0B 00 00 00 00 01
F00:0041         NOP
               S03:00000096:  0B 00 00 00 00 01
F00:0042         NOP
               S03:0000009C:  0B 00 00 00 00 01
F00:0043       	NOP  
               S03:000000A2:  0B 00 00 00 00 01
F00:0044       stall:
F00:0045       	BRA	stall
               S03:000000A8:  19 00 00 00 00 01
F00:0046       
F00:0047       	.balign	0x100,0x0B
F00:0048       
F00:0049       


Sections:
S01  .bss
S02  .data
S03  .text


Sources:
F00  fibonacci.asm


Symbols:
floop LAB (0x4e) sec=.text 
stall LAB (0xa8) sec=.text 
start LAB (0x0) UNUSED sec=.text 
_data_a LAB (0x0) UNUSED sec=.data 
_bss_a LAB (0x0) UNUSED sec=.bss 
__VASM EXPR(0=0x0) INTERNAL 
__MSDOSFS EXPR(0=0x0) INTERNAL 

There have been no errors.
